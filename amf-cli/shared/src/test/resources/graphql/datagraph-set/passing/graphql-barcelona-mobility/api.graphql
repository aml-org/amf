schema {
  query: RootQuery
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""Information of the bike availability of a station by type"""
type BikeAvailabilityInfo {
  """Number of available electrical bikes in the station"""
  electrical: Int

  """Number of available mechanical bikes in the station"""
  mechanical: Int

  """Total number of available bikes in the station"""
  total: Int
}

"""Bike station information"""
type BikeStation {
  """Unique ID of the station"""
  id: ID

  """Status of the station e.g. IN_SERVICE"""
  status: BikeStationStatus

  """Last updated information timestamp (in ms since epoch)"""
  lastUpdated: Int

  """Name of the station"""
  name: String

  """Total number of bikes the station has"""
  capacity: Int

  """Location coordinates of the station"""
  coordinates: CoordinatesOutput

  """Information about the available bikes and docks of the station"""
  available: BikeStationAvailabilityInfo
}

"""Information about the available bikes and docks of the station"""
type BikeStationAvailabilityInfo {
  """Number of available bikes in the station by type"""
  bikes: BikeAvailabilityInfo

  """Number of available docks in the station"""
  docks: Int
}

"""A connection to a list of items."""
type BikeStationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BikeStationEdge]
}

"""An edge in a connection."""
type BikeStationEdge {
  """The item at the end of the edge"""
  node: BikeStation

  """A cursor for use in pagination"""
  cursor: String!
}

union BikeStationQueryResponse = BikeStation | NotFoundError

enum BikeStationStatus {
  IN_SERVICE
  MAINTENANCE
  CLOSED
}

"""Bus line information"""
type BusLine {
  """Numeric Code of the line"""
  id: Int

  """Name of the line"""
  name: String

  """Origin stop of the line"""
  originStop: BusStop

  """Ending stop of the line"""
  endingStop: BusStop

  """Stops of the line"""
  stops(after: String, first: Int, before: String, last: Int): BusStopConnection

  """Color of the line represented as a Hexadecimal string"""
  color: String
}

"""A connection to a list of items."""
type BusLineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BusLineEdge]
}

"""An edge in a connection."""
type BusLineEdge {
  """The item at the end of the edge"""
  node: BusLine

  """A cursor for use in pagination"""
  cursor: String!
}

union BusLineQueryResponse = BusLine | NotFoundError

"""Bus stop information"""
type BusStop {
  """Unique ID of the stop"""
  id: ID

  """Name of the stop"""
  name: String

  """Location of the stop"""
  location: Location
}

"""A connection to a list of items."""
type BusStopConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BusStopEdge]
}

"""An edge in a connection."""
type BusStopEdge {
  """The item at the end of the edge"""
  node: BusStop

  """A cursor for use in pagination"""
  cursor: String!
}

union BusStopQueryResponse = BusStop | NotFoundError

"""Coordinates (Latitude, Longitude, Altitude), of a given station/stop"""
input CoordinatesInput {
  latitude: Float
  longitude: Float
  altitude: Float
}

"""Coordinates (Latitude, Longitude, Altitude), of a given station/stop"""
type CoordinatesOutput {
  latitude: Float
  longitude: Float
  altitude: Float
}

"""
Input for the filterBy argument of the bikes queries, which allows filtering a
connection by some parameters (e.g. only with available bikes)
"""
input FilterByInputBike {
  only: OnlyFilterByInputBike
}

"""
Input for the filterBy argument of the metro and bus queries, which allows
filtering a connection by some parameters (e.g. lineName or lineId)
"""
input FilterByInputTmb {
  lineId: Int
  lineName: String
}

"""
Input for the FindBy argument of the queries, which allows finding an entity by some parameters (e.g. name or id)
"""
input FindByInput {
  id: Int
  name: String

  """Finds the closest station given some coordinates"""
  closest: CoordinatesInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Location of a stop/station"""
type Location {
  address: String
  city: String
  district: String
  street: String
  coordinates: CoordinatesOutput
}

"""Metro line information"""
type MetroLine {
  """Numeric Code of the line"""
  id: Int

  """Name of the line"""
  name: String

  """Origin station of the line"""
  originStation: MetroStation

  """Ending station of the line"""
  endingStation: MetroStation

  """Stations of the line"""
  stations(after: String, first: Int, before: String, last: Int): MetroStationConnection

  """Color of the line represented as a Hexadecimal string"""
  color: String
}

"""A connection to a list of items."""
type MetroLineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MetroLineEdge]
}

"""An edge in a connection."""
type MetroLineEdge {
  """The item at the end of the edge"""
  node: MetroLine

  """A cursor for use in pagination"""
  cursor: String!
}

union MetroLineQueryResponse = MetroLine | NotFoundError

"""Metro station information"""
type MetroStation {
  """Unique ID of the station"""
  id: ID

  """Name of the station"""
  name: String

  """Location coordinates of the station"""
  coordinates: CoordinatesOutput

  """Lines the station belongs to e.g. L1, L2"""
  lines: [String]
}

"""A connection to a list of items."""
type MetroStationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MetroStationEdge]
}

"""An edge in a connection."""
type MetroStationEdge {
  """The item at the end of the edge"""
  node: MetroStation

  """A cursor for use in pagination"""
  cursor: String!
}

union MetroStationQueryResponse = MetroStation | NotFoundError

type NotFoundError {
  """Search params that resulted in a not found error"""
  params: JSON
}

input OnlyFilterByInputBike {
  hasAvailableBikes: Boolean
  hasAvailableElectricalBikes: Boolean
  isInService: Boolean
  hasAvailableDocks: Boolean
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Root Query"""
type RootQuery {
  """Information about the metro stations of the city of Barcelona"""
  metroStations(after: String, first: Int, before: String, last: Int, filterBy: FilterByInputTmb): MetroStationConnection

  """Returns the information about a metro station"""
  metroStation(findBy: FindByInput!): MetroStationQueryResponse

  """Returns the information about a metro line"""
  metroLine(findBy: FindByInput!): MetroLineQueryResponse

  """Information about the metro lines of the city of Barcelona"""
  metroLines(after: String, first: Int, before: String, last: Int): MetroLineConnection

  """
  Information about the public bike stations (SMOU) of the city of Barcelona
  """
  bikeStations(after: String, first: Int, before: String, last: Int, filterBy: FilterByInputBike): BikeStationConnection

  """Returns the information about a bike station"""
  bikeStation(findBy: FindByInput!): BikeStationQueryResponse

  """Returns the information about a bus stop"""
  busStop(findBy: FindByInput!): BusStopQueryResponse

  """Information about the bus stops of the city of Barcelona"""
  busStops(after: String, first: Int, before: String, last: Int, filterBy: FilterByInputTmb): BusStopConnection

  """Returns the information about a bus line"""
  busLine(findBy: FindByInput!): BusLineQueryResponse

  """Information about the bus lines of the city of Barcelona"""
  busLines(after: String, first: Int, before: String, last: Int): BusLineConnection
}

