type AutorProposicao {
  codTipo: Int
  nome: String
  tipo: String
  uri: String
}

type Bloco {
  id: ID!
  idLegislatura: String
  nome: String
  uri: String
}

type BlocoCursor {
  edges: [BlocoEdge]
  pageInfo: PageInfo!
}

type BlocoEdge {
  node: Bloco
  cursor: String
}

type Deputado {
  id: ID!
  cpf: String
  dataFalecimento: String
  dataNascimento: String
  escolaridade: String
  municipioNascimento: String
  nomeCivil: String
  redeSocial: [String]
  sexo: String
  ufNascimento: String
  uri: String
  urlWebsite: String
  ultimoStatus: UltimoStatus
}

type DeputadoSimples {
  id: ID!
  idLegislatura: Int
  nome: String
  siglaPartido: String
  siglaUf: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type DeputadoSimplesCursor {
  edges: [DeputadoSimplesEdge]!
  pageInfo: PageInfo!
}

type DeputadoSimplesEdge {
  node: DeputadoSimples
  cursor: String
}

type Despesa {
  ano: Int
  cnpjCpfFornecedor: String
  dataDocumento: String
  idDocumento: Int
  idLote: Int
  idTipoDocumento: Int
  mes: Int
  nomeFornecedor: String
  numDocumento: String
  numRessarcimento: String
  parcela: Int
  tipoDespesa: String
  tipoDocumento: String
  urlDocumento: String
  valorDocumento: Float
  valorGlosa: Float
  valorLiquido: Float
}

type DespesaCursor {
  edges: [DespesaEdge]!
  pageInfo: PageInfo!
}

type DespesaEdge {
  node: Despesa
  cursor: String
}

type Evento {
  id: ID!
  dataHoraFim: String
  dataHoraInicio: String
  descricaoSituacao: String
  descricaoTipo: String
  fases: String
  localCamara: LocalCamara
  localExterno: String
  orgaos: [OrgaoEvento]
  titulo: String
  uri: String
  uriConvidados: String
  uriDeputados: String
}

type EventoCursor {
  pageInfo: PageInfo
  edges: [EventoEdge]
}

type EventoEdge {
  node: Evento
  cursor: String
}

type Gabinete {
  andar: String
  email: String
  nome: String
  predio: String
  sala: String
  telefone: String
}

type Legislatura {
  id: ID!
  dataFim: String
  dataInicio: String
  uri: String
}

type LegislaturaCursor {
  pageInfo: PageInfo!
  edges: [LegislaturaEdge]
}

type LegislaturaEdge {
  node: Legislatura
  cursor: String
}

type Lider {
  idLegislatura: Int
  nome: String
  siglaPartido: String
  uf: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type LocalCamara {
  andar: String
  nome: String
  predio: String
  sala: String
}

type MembroOrgao {
  id: ID!
  dataFim: String
  dataInicio: String
  idLegislatura: Int
  idPapel: Int
  nome: String
  nomePapel: String
  siglaPartido: String
  siglaUf: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type MembroPartido {
  id: ID!
  idLegislatura: Int
  nome: String
  siglaPartido: String
  siglaUf: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type Mesa {
  id: ID!
  dataFim: String
  dataInicio: String
  idLegislatura: Int
  idPapel: String
  nome: String
  nomePapel: String
  siglaPartido: String
  siglaUf: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type Orgao {
  id: ID!
  apelido: String
  casa: String
  dataFim: String
  dataFimOriginal: String
  dataInicio: String
  dataInstalacao: String
  idTipoOrgao: Int
  nome: String
  sala: String
  sigla: String
  tipoOrgao: String
  uri: String
  urlWebsite: String
}

type OrgaoCursor {
  pageInfo: PageInfo
  edges: [OrgaoEdge]
}

type OrgaoEdge {
  node: Orgao
  cursor: String
}

type OrgaoEvento {
  id: ID!
  apelido: String
  idTipoOrgao: Int
  nome: String
  sigla: String
  tipoOrgao: String
  uri: String
}

type Orientacao {
  nomeBancada: String
  uriBancada: String
  voto: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Parlamentar {
  id: ID!
  idLegislatura: Int
  nome: String
  siglaPartido: String
  siglaUf: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type Partido {
  id: ID!
  nome: String
  numeroEleitoral: Int
  sigla: String
  status: StatusPartido
  uri: String
  urlFacebook: String
  urlLogo: String
  urlWebSite: String
}

type PartidoCursor {
  pageInfo: PageInfo
  edges: [PartidoEdge]
}

type PartidoEdge {
  node: Partido
  cursor: String
}

type Pauta {
  codRegime: Int
  ordem: Int
  proposicao: ProposicaoPauta
  regime: String
  situacaoItem: String
  uriProposicaoRelacionada: String
  uriVotacao: String
}

type Proposicao {
  id: ID!
  ano: Int
  dataApresentacao: String
  descricaoTipo: String
  ementa: String
  ementaDetalhada: String
  idTipo: Int
  justificativa: String
  keywords: String
  numero: Int
  siglaTipo: String
  statusProposicao: StatusProposicao
  texto: String
  uri: String
  uriAutores: String
  uriOrgaoNumerador: String
  uriPropAnterior: String
  uriPropPosterior: String
  uriPropPrincipal: String
  uriUltimoRelator: String
  urlInteiroTeor: String
  urnFinal: String
}

type ProposicaoCursor {
  pageInfo: PageInfo
  edges: [ProposicaoEdge]
}

type ProposicaoEdge {
  node: Proposicao
  cursor: String
}

type ProposicaoPauta {
  id: ID!
  ano: Int
  ementa: String
  idTipo: Int
  numero: Int
  siglaTipo: String
  uri: String
}

type ProposicaoVotacao {
  id: ID!
  ano: Int
  ementa: String
  idTipo: Int
  numero: Int
  siglaTipo: String
  uri: String
}

type Query {
  blocos(id: [Int], idLegislatura: [Int], siglaPartido: [String], after: String, first: Int, ordem: String, ordenarPor: String): BlocoCursor
  bloco(id: ID!): Bloco
  deputados(id: [Int], nome: String, idLegislatura: [Int], siglaUf: [String], siglaPartido: [String], siglaSexo: String, after: String, first: Int, dataInicio: String, dataFim: String, ordem: String, ordenarPor: String): DeputadoSimplesCursor
  deputado(id: ID!): Deputado
  deputadoDespesas(id: ID!, idLegislatura: [Int], ano: [Int], mes: [Int], cnpjCpfFornecedor: String, after: String, first: Int, ordem: String, ordenarPor: String): DespesaCursor
  deputadoEventos(id: ID!, dataInicio: String, dataFim: String, after: String, first: Int, ordem: String, ordenarPor: String): EventoCursor
  deputadoOrgaos(id: ID!, dataInicio: String, dataFim: String, after: String, first: Int, ordem: String, ordenarPor: String): OrgaoCursor
  eventos(id: [Int], idTipoEvento: [Int], idSituacao: [Int], idTipoOrgao: [Int], idOrgao: [Int], dataInicio: String, dataFim: String, horaInicio: String, horaFim: String, after: String, first: Int, ordem: String, ordenarPor: String): EventoCursor
  evento(id: ID!): Evento
  eventoDeputados(id: ID!): [Deputado]
  eventoOrgaos(id: ID!): [Orgao]
  eventoPautas(id: ID!): [Pauta]
  eventoSituacoes: [Situacao]
  eventoTipos: [TipoEvento]
  legislaturas(id: [Int], data: String, after: String, first: Int, ordem: String, ordenarPor: String): LegislaturaCursor
  legislatura(id: ID!): Legislatura
  legislaturaMesa(id: String, dataInicio: String, dataFim: String): [Mesa]
  partidos(sigla: [String], dataInicio: String, dataFim: String, idLegislatura: [Int], after: String, first: Int, ordem: String, ordenarPor: String): PartidoCursor
  partido(id: ID!): Partido
  partidoMembros(id: ID!, dataInicio: String, dataFim: String, idLegislatura: [Int], ordenarPor: String, ordem: String, first: Int, after: String): [Deputado]
  proposicoes(id: [Int], siglaTipo: [String], numero: [Int], ano: [Int], idAutor: [Int], autor: String, siglaPartidoAutor: [String], idPartidoAutor: Int, siglaUfAutor: [String], keywords: [String], tramitacaoSenado: Boolean, dataInicio: String, dataFim: String, dataApresentacaoInicio: String, dataApresentacaoFim: String, idSituacao: [Int], after: String, first: Int, ordem: String, ordenarPor: String): ProposicaoCursor
  proposicao(id: ID!): Proposicao
  proposicaoAutores(id: ID!): [AutorProposicao]
  proposicaoTramitacoes(id: ID!, dataInicio: String, dataFim: String): [Tramitacao]
  proposicaoVotacoes(id: ID!): [Votacao]
  proposicaoSituacoes: [Situacao]
  orgaos(id: [Int], sigla: [String], idTipoOrgao: [Int], dataInicio: String, dataFim: String, after: String, first: Int, ordem: String, ordenarPor: String): OrgaoCursor
  orgao(id: ID!): Orgao
  orgaoEventos(id: ID!, idTipoEvento: [Int], dataInicio: String, dataFim: String, after: Int, first: Int, ordem: String, ordenarPor: String): EventoCursor
  orgaoMembros(id: ID!, dataInicio: String, dataFim: String, after: Int, first: Int): [MembroOrgao]
  orgaoSituacoes: [Situacao]
  votacao(id: ID!): Votacao
  votacaoVotos(id: ID!, after: String, first: Int!): VotoCursor
}

type Relator {
  id: ID!
  idLegislatura: Int
  nome: String
  siglaPartido: String
  siglaUf: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type SiglaTipo {
  id: ID!
  descricao: String
  nome: String
  sigla: String
}

type Situacao {
  id: ID!
  descricao: String
  nome: String
  sigla: String
}

type StatusPartido {
  data: String
  idLegislatura: Int
  lider: Lider
  situacao: String
  totalMembros: String
  totalPosse: String
  uriMembros: String
}

type StatusProposicao {
  dataHora: String
  descricaoSituacao: String
  descricaoTramitacao: String
  despacho: String
  idSituacao: Int
  idTipoTramitacao: String
  regime: String
  sequencia: Int
  siglaOrgao: String
  uriOrgao: String
  url: String
}

type TipoEvento {
  id: ID!
  descricao: String
  nome: String
  sigla: String
}

type Tramitacao {
  dataHora: String
  descricaoSituacao: String
  descricaoTramitacao: String
  despacho: String
  idSituacao: Int
  idTipoTramitacao: String
  regime: String
  sequencia: Int
  siglaOrgao: String
  uriOrgao: String
  url: String
}

type UltimoStatus {
  id: ID!
  condicaoEleitoral: String
  data: String
  descricaoStatus: String
  gabinete: Gabinete
  idLegislatura: Int
  nome: String
  nomeEleitoral: String
  siglaPartido: String
  siglaUf: String
  situacao: String
  uri: String
  uriPartido: String
  urlFoto: String
}

type Votacao {
  id: ID!
  aprovada: Boolean
  dataHoraFim: String
  dataHoraInicio: String
  despacho: String
  ementaParecer: String
  numPresentes: Int
  numVotantes: Int
  orientacoes: [Orientacao]
  placarAbstencao: Int
  placarNao: Int
  placarSim: Int
  proposicao: ProposicaoVotacao
  relator: Relator
  tipoVotacao: String
  titulo: String
  uri: String
  uriEvento: String
  uriProposicaoPrincipal: String
}

type Voto {
  parlamentar: Parlamentar
  voto: String
}

type VotoCursor {
  pageInfo: PageInfo
  edges: [VotoEdge]
}

type VotoEdge {
  node: Voto
  cursor: String
}

