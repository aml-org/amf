directive @cypher(statement: String) on FIELD_DEFINITION

directive @relation(name: String, direction: _RelationDirections, from: String, to: String) on FIELD_DEFINITION | OBJECT

directive @additionalLabels(labels: [String]) on OBJECT

directive @MutationMeta(relationship: String, from: String, to: String) on FIELD_DEFINITION

directive @neo4j_ignore on FIELD_DEFINITION

input _CallingCodeFilter {
  AND: [_CallingCodeFilter!]
  OR: [_CallingCodeFilter!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  countries: _CountryFilter
  countries_not: _CountryFilter
  countries_in: [_CountryFilter!]
  countries_not_in: [_CountryFilter!]
  countries_some: _CountryFilter
  countries_none: _CountryFilter
  countries_single: _CountryFilter
  countries_every: _CountryFilter
}

enum _CallingCodeOrdering {
  _id_asc
  _id_desc
  name_asc
  name_desc
}

input _CountryFilter {
  AND: [_CountryFilter!]
  OR: [_CountryFilter!]
  alpha2Code: String
  alpha2Code_not: String
  alpha2Code_in: [String!]
  alpha2Code_not_in: [String!]
  alpha2Code_contains: String
  alpha2Code_not_contains: String
  alpha2Code_starts_with: String
  alpha2Code_not_starts_with: String
  alpha2Code_ends_with: String
  alpha2Code_not_ends_with: String
  alpha3Code: String
  alpha3Code_not: String
  alpha3Code_in: [String!]
  alpha3Code_not_in: [String!]
  alpha3Code_contains: String
  alpha3Code_not_contains: String
  alpha3Code_starts_with: String
  alpha3Code_not_starts_with: String
  alpha3Code_ends_with: String
  alpha3Code_not_ends_with: String
  area: Float
  area_not: Float
  area_in: [Float!]
  area_not_in: [Float!]
  area_lt: Float
  area_lte: Float
  area_gt: Float
  area_gte: Float
  capital: String
  capital_not: String
  capital_in: [String!]
  capital_not_in: [String!]
  capital_contains: String
  capital_not_contains: String
  capital_starts_with: String
  capital_not_starts_with: String
  capital_ends_with: String
  capital_not_ends_with: String
  demonym: String
  demonym_not: String
  demonym_in: [String!]
  demonym_not_in: [String!]
  demonym_contains: String
  demonym_not_contains: String
  demonym_starts_with: String
  demonym_not_starts_with: String
  demonym_ends_with: String
  demonym_not_ends_with: String
  gini: Float
  gini_not: Float
  gini_in: [Float!]
  gini_not_in: [Float!]
  gini_lt: Float
  gini_lte: Float
  gini_gt: Float
  gini_gte: Float
  location: _Neo4jPointInput
  location_not: _Neo4jPointInput
  location_distance: _Neo4jPointDistanceFilter
  location_distance_lt: _Neo4jPointDistanceFilter
  location_distance_lte: _Neo4jPointDistanceFilter
  location_distance_gt: _Neo4jPointDistanceFilter
  location_distance_gte: _Neo4jPointDistanceFilter
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nameTranslations: _TranslationFilter
  nameTranslations_not: _TranslationFilter
  nameTranslations_in: [_TranslationFilter!]
  nameTranslations_not_in: [_TranslationFilter!]
  nameTranslations_some: _TranslationFilter
  nameTranslations_none: _TranslationFilter
  nameTranslations_single: _TranslationFilter
  nameTranslations_every: _TranslationFilter
  nativeName: String
  nativeName_not: String
  nativeName_in: [String!]
  nativeName_not_in: [String!]
  nativeName_contains: String
  nativeName_not_contains: String
  nativeName_starts_with: String
  nativeName_not_starts_with: String
  nativeName_ends_with: String
  nativeName_not_ends_with: String
  numericCode: String
  numericCode_not: String
  numericCode_in: [String!]
  numericCode_not_in: [String!]
  numericCode_contains: String
  numericCode_not_contains: String
  numericCode_starts_with: String
  numericCode_not_starts_with: String
  numericCode_ends_with: String
  numericCode_not_ends_with: String
  population: Float
  population_not: Float
  population_in: [Float!]
  population_not_in: [Float!]
  population_lt: Float
  population_lte: Float
  population_gt: Float
  population_gte: Float
  topLevelDomains: _TopLevelDomainFilter
  topLevelDomains_not: _TopLevelDomainFilter
  topLevelDomains_in: [_TopLevelDomainFilter!]
  topLevelDomains_not_in: [_TopLevelDomainFilter!]
  topLevelDomains_some: _TopLevelDomainFilter
  topLevelDomains_none: _TopLevelDomainFilter
  topLevelDomains_single: _TopLevelDomainFilter
  topLevelDomains_every: _TopLevelDomainFilter
  callingCodes: _CallingCodeFilter
  callingCodes_not: _CallingCodeFilter
  callingCodes_in: [_CallingCodeFilter!]
  callingCodes_not_in: [_CallingCodeFilter!]
  callingCodes_some: _CallingCodeFilter
  callingCodes_none: _CallingCodeFilter
  callingCodes_single: _CallingCodeFilter
  callingCodes_every: _CallingCodeFilter
  timezones: _TimezoneFilter
  timezones_not: _TimezoneFilter
  timezones_in: [_TimezoneFilter!]
  timezones_not_in: [_TimezoneFilter!]
  timezones_some: _TimezoneFilter
  timezones_none: _TimezoneFilter
  timezones_single: _TimezoneFilter
  timezones_every: _TimezoneFilter
  borders: _CountryFilter
  borders_not: _CountryFilter
  borders_in: [_CountryFilter!]
  borders_not_in: [_CountryFilter!]
  borders_some: _CountryFilter
  borders_none: _CountryFilter
  borders_single: _CountryFilter
  borders_every: _CountryFilter
  subregion: _SubregionFilter
  subregion_not: _SubregionFilter
  subregion_in: [_SubregionFilter!]
  subregion_not_in: [_SubregionFilter!]
  officialLanguages: _LanguageFilter
  officialLanguages_not: _LanguageFilter
  officialLanguages_in: [_LanguageFilter!]
  officialLanguages_not_in: [_LanguageFilter!]
  officialLanguages_some: _LanguageFilter
  officialLanguages_none: _LanguageFilter
  officialLanguages_single: _LanguageFilter
  officialLanguages_every: _LanguageFilter
  currencies: _CurrencyFilter
  currencies_not: _CurrencyFilter
  currencies_in: [_CurrencyFilter!]
  currencies_not_in: [_CurrencyFilter!]
  currencies_some: _CurrencyFilter
  currencies_none: _CurrencyFilter
  currencies_single: _CurrencyFilter
  currencies_every: _CurrencyFilter
  regionalBlocs: _RegionalBlocFilter
  regionalBlocs_not: _RegionalBlocFilter
  regionalBlocs_in: [_RegionalBlocFilter!]
  regionalBlocs_not_in: [_RegionalBlocFilter!]
  regionalBlocs_some: _RegionalBlocFilter
  regionalBlocs_none: _RegionalBlocFilter
  regionalBlocs_single: _RegionalBlocFilter
  regionalBlocs_every: _RegionalBlocFilter
  flag: _FlagFilter
  flag_not: _FlagFilter
  flag_in: [_FlagFilter!]
  flag_not_in: [_FlagFilter!]
  distanceToOtherCountries: _DistanceToOtherCountryFilter
  distanceToOtherCountries_not: _DistanceToOtherCountryFilter
  distanceToOtherCountries_in: [_DistanceToOtherCountryFilter!]
  distanceToOtherCountries_not_in: [_DistanceToOtherCountryFilter!]
  distanceToOtherCountries_some: _DistanceToOtherCountryFilter
  distanceToOtherCountries_none: _DistanceToOtherCountryFilter
  distanceToOtherCountries_single: _DistanceToOtherCountryFilter
  distanceToOtherCountries_every: _DistanceToOtherCountryFilter
  shortestPathToOtherCountry: _CountryFilter
  shortestPathToOtherCountry_not: _CountryFilter
  shortestPathToOtherCountry_in: [_CountryFilter!]
  shortestPathToOtherCountry_not_in: [_CountryFilter!]
  shortestPathToOtherCountry_some: _CountryFilter
  shortestPathToOtherCountry_none: _CountryFilter
  shortestPathToOtherCountry_single: _CountryFilter
  shortestPathToOtherCountry_every: _CountryFilter
}

enum _CountryOrdering {
  _id_asc
  _id_desc
  alpha2Code_asc
  alpha2Code_desc
  alpha3Code_asc
  alpha3Code_desc
  area_asc
  area_desc
  capital_asc
  capital_desc
  populationDensity_asc
  populationDensity_desc
  demonym_asc
  demonym_desc
  gini_asc
  gini_desc
  name_asc
  name_desc
  nativeName_asc
  nativeName_desc
  numericCode_asc
  numericCode_desc
  population_asc
  population_desc
}

input _CurrencyFilter {
  AND: [_CurrencyFilter!]
  OR: [_CurrencyFilter!]
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  countries: _CountryFilter
  countries_not: _CountryFilter
  countries_in: [_CountryFilter!]
  countries_not_in: [_CountryFilter!]
  countries_some: _CountryFilter
  countries_none: _CountryFilter
  countries_single: _CountryFilter
  countries_every: _CountryFilter
}

enum _CurrencyOrdering {
  _id_asc
  _id_desc
  code_asc
  code_desc
  name_asc
  name_desc
  symbol_asc
  symbol_desc
}

input _DistanceToOtherCountryFilter {
  AND: [_DistanceToOtherCountryFilter!]
  OR: [_DistanceToOtherCountryFilter!]
  distanceInKm: Float
  distanceInKm_not: Float
  distanceInKm_in: [Float!]
  distanceInKm_not_in: [Float!]
  distanceInKm_lt: Float
  distanceInKm_lte: Float
  distanceInKm_gt: Float
  distanceInKm_gte: Float
  countryName: String
  countryName_not: String
  countryName_in: [String!]
  countryName_not_in: [String!]
  countryName_contains: String
  countryName_not_contains: String
  countryName_starts_with: String
  countryName_not_starts_with: String
  countryName_ends_with: String
  countryName_not_ends_with: String
}

enum _DistanceToOtherCountryOrdering {
  distanceInKm_asc
  distanceInKm_desc
  countryName_asc
  countryName_desc
  _id_asc
  _id_desc
}

input _FlagFilter {
  AND: [_FlagFilter!]
  OR: [_FlagFilter!]
  emoji: String
  emoji_not: String
  emoji_in: [String!]
  emoji_not_in: [String!]
  emoji_contains: String
  emoji_not_contains: String
  emoji_starts_with: String
  emoji_not_starts_with: String
  emoji_ends_with: String
  emoji_not_ends_with: String
  emojiUnicode: String
  emojiUnicode_not: String
  emojiUnicode_in: [String!]
  emojiUnicode_not_in: [String!]
  emojiUnicode_contains: String
  emojiUnicode_not_contains: String
  emojiUnicode_starts_with: String
  emojiUnicode_not_starts_with: String
  emojiUnicode_ends_with: String
  emojiUnicode_not_ends_with: String
  svgFile: String
  svgFile_not: String
  svgFile_in: [String!]
  svgFile_not_in: [String!]
  svgFile_contains: String
  svgFile_not_contains: String
  svgFile_starts_with: String
  svgFile_not_starts_with: String
  svgFile_ends_with: String
  svgFile_not_ends_with: String
  country: _CountryFilter
  country_not: _CountryFilter
  country_in: [_CountryFilter!]
  country_not_in: [_CountryFilter!]
}

enum _FlagOrdering {
  _id_asc
  _id_desc
  emoji_asc
  emoji_desc
  emojiUnicode_asc
  emojiUnicode_desc
  svgFile_asc
  svgFile_desc
}

input _LanguageFilter {
  AND: [_LanguageFilter!]
  OR: [_LanguageFilter!]
  iso639_1: String
  iso639_1_not: String
  iso639_1_in: [String!]
  iso639_1_not_in: [String!]
  iso639_1_contains: String
  iso639_1_not_contains: String
  iso639_1_starts_with: String
  iso639_1_not_starts_with: String
  iso639_1_ends_with: String
  iso639_1_not_ends_with: String
  iso639_2: String
  iso639_2_not: String
  iso639_2_in: [String!]
  iso639_2_not_in: [String!]
  iso639_2_contains: String
  iso639_2_not_contains: String
  iso639_2_starts_with: String
  iso639_2_not_starts_with: String
  iso639_2_ends_with: String
  iso639_2_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nativeName: String
  nativeName_not: String
  nativeName_in: [String!]
  nativeName_not_in: [String!]
  nativeName_contains: String
  nativeName_not_contains: String
  nativeName_starts_with: String
  nativeName_not_starts_with: String
  nativeName_ends_with: String
  nativeName_not_ends_with: String
  countries: _CountryFilter
  countries_not: _CountryFilter
  countries_in: [_CountryFilter!]
  countries_not_in: [_CountryFilter!]
  countries_some: _CountryFilter
  countries_none: _CountryFilter
  countries_single: _CountryFilter
  countries_every: _CountryFilter
}

enum _LanguageOrdering {
  _id_asc
  _id_desc
  iso639_1_asc
  iso639_1_desc
  iso639_2_asc
  iso639_2_desc
  name_asc
  name_desc
  nativeName_asc
  nativeName_desc
}

type _Neo4jDate {
  year: Int
  month: Int
  day: Int
  formatted: String
}

input _Neo4jDateInput {
  year: Int
  month: Int
  day: Int
  formatted: String
}

type _Neo4jDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

type _Neo4jLocalDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jLocalTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jPoint {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

input _Neo4jPointDistanceFilter {
  point: _Neo4jPointInput!
  distance: Float!
}

input _Neo4jPointInput {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

type _Neo4jTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _RegionalBlocFilter {
  AND: [_RegionalBlocFilter!]
  OR: [_RegionalBlocFilter!]
  acronym: String
  acronym_not: String
  acronym_in: [String!]
  acronym_not_in: [String!]
  acronym_contains: String
  acronym_not_contains: String
  acronym_starts_with: String
  acronym_not_starts_with: String
  acronym_ends_with: String
  acronym_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  countries: _CountryFilter
  countries_not: _CountryFilter
  countries_in: [_CountryFilter!]
  countries_not_in: [_CountryFilter!]
  countries_some: _CountryFilter
  countries_none: _CountryFilter
  countries_single: _CountryFilter
  countries_every: _CountryFilter
}

enum _RegionalBlocOrdering {
  _id_asc
  _id_desc
  acronym_asc
  acronym_desc
  name_asc
  name_desc
}

input _RegionFilter {
  AND: [_RegionFilter!]
  OR: [_RegionFilter!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subregions: _SubregionFilter
  subregions_not: _SubregionFilter
  subregions_in: [_SubregionFilter!]
  subregions_not_in: [_SubregionFilter!]
  subregions_some: _SubregionFilter
  subregions_none: _SubregionFilter
  subregions_single: _SubregionFilter
  subregions_every: _SubregionFilter
}

enum _RegionOrdering {
  _id_asc
  _id_desc
  name_asc
  name_desc
}

enum _RelationDirections {
  IN
  OUT
}

input _SubregionFilter {
  AND: [_SubregionFilter!]
  OR: [_SubregionFilter!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  region: _RegionFilter
  region_not: _RegionFilter
  region_in: [_RegionFilter!]
  region_not_in: [_RegionFilter!]
  countries: _CountryFilter
  countries_not: _CountryFilter
  countries_in: [_CountryFilter!]
  countries_not_in: [_CountryFilter!]
  countries_some: _CountryFilter
  countries_none: _CountryFilter
  countries_single: _CountryFilter
  countries_every: _CountryFilter
}

enum _SubregionOrdering {
  _id_asc
  _id_desc
  name_asc
  name_desc
}

input _TimezoneFilter {
  AND: [_TimezoneFilter!]
  OR: [_TimezoneFilter!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  countries: _CountryFilter
  countries_not: _CountryFilter
  countries_in: [_CountryFilter!]
  countries_not_in: [_CountryFilter!]
  countries_some: _CountryFilter
  countries_none: _CountryFilter
  countries_single: _CountryFilter
  countries_every: _CountryFilter
}

enum _TimezoneOrdering {
  _id_asc
  _id_desc
  name_asc
  name_desc
}

input _TopLevelDomainFilter {
  AND: [_TopLevelDomainFilter!]
  OR: [_TopLevelDomainFilter!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  countries: _CountryFilter
  countries_not: _CountryFilter
  countries_in: [_CountryFilter!]
  countries_not_in: [_CountryFilter!]
  countries_some: _CountryFilter
  countries_none: _CountryFilter
  countries_single: _CountryFilter
  countries_every: _CountryFilter
}

enum _TopLevelDomainOrdering {
  _id_asc
  _id_desc
  name_asc
  name_desc
}

input _TranslationFilter {
  AND: [_TranslationFilter!]
  OR: [_TranslationFilter!]
  languageCode: String
  languageCode_not: String
  languageCode_in: [String!]
  languageCode_not_in: [String!]
  languageCode_contains: String
  languageCode_not_contains: String
  languageCode_starts_with: String
  languageCode_not_starts_with: String
  languageCode_ends_with: String
  languageCode_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
}

enum _TranslationOrdering {
  _id_asc
  _id_desc
  languageCode_asc
  languageCode_desc
  value_asc
  value_desc
}

type AlternativeSpelling {
  _id: String!
  name: String!
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type Area {
  value: Float
  unit: String

  """The population per square <your selected unit>"""
  populationDensity: Float
}

enum AreaUnit {
  SQUARE_KILOMETERS
  SQUARE_METERS
  SQUARE_MILES
}

type CallingCode {
  _id: String
  name: String!
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type Country {
  _id: String

  """
  ISO 3166-1 alpha-2 codes are two-letter country codes defined in ISO 3166-1,
  part of the ISO 3166 standard published by the International Organization for
  Standardization (ISO), to represent countries, dependent territories, and
  special areas of geographical interest.
  https://en.m.wikipedia.org/wiki/ISO_3166-1_alpha-2
  """
  alpha2Code: String!

  """
  ISO 3166-1 alpha-3 codes are three-letter country codes defined in ISO 3166-1,
  part of the ISO 3166 standard published by the International Organization for
  Standardization (ISO), to represent countries, dependent territories, and
  special areas of geographical interest.
  https://en.m.wikipedia.org/wiki/ISO_3166-1_alpha-3
  """
  alpha3Code: String!

  """
  The area in square kilometer, you can convert the area unit and population density through the convertedArea property
  """
  area: Float
  capital: String!

  """The population per square kilometer"""
  populationDensity: Float
  convertedArea(areaUnit: AreaUnit = SQUARE_MILES): Area

  """
  identifies residents or natives of a particular place, usually derived from
  the name of the place or that of an ethnic group.
  https://en.m.wikipedia.org/wiki/Demonym
  """
  demonym: String!

  """
  In economics, the Gini coefficient, sometimes called the Gini index or Gini
  ratio, is a measure of statistical dispersion intended to represent the income
  or wealth distribution of a nation's residents, and is the most commonly used
  measurement of inequality. https://en.m.wikipedia.org/wiki/Gini_coefficient
  """
  gini: Float
  location: _Neo4jPoint!
  name: String!
  nameTranslations(first: Int, offset: Int, orderBy: [_TranslationOrdering], filter: _TranslationFilter): [Translation]
  nativeName: String!
  numericCode: String
  population: Float!

  """
  A country code top-level domain (ccTLD) is an Internet top-level domain
  generally used or reserved for a country, sovereign state, or dependent
  territory identified with a country code.
  https://en.m.wikipedia.org/wiki/Country_code_top-level_domain
  """
  topLevelDomains(first: Int, offset: Int, orderBy: [_TopLevelDomainOrdering], filter: _TopLevelDomainFilter): [TopLevelDomain]
  callingCodes(first: Int, offset: Int, orderBy: [_CallingCodeOrdering], filter: _CallingCodeFilter): [CallingCode]
  alternativeSpellings: [AlternativeSpelling]
  timezones(first: Int, offset: Int, orderBy: [_TimezoneOrdering], filter: _TimezoneFilter): [Timezone]
  borders(first: Int, offset: Int, orderBy: [_CountryOrdering]): [Country]
  subregion(filter: _SubregionFilter): Subregion
  officialLanguages(first: Int, offset: Int, orderBy: [_LanguageOrdering], filter: _LanguageFilter): [Language]
  currencies(first: Int, offset: Int, orderBy: [_CurrencyOrdering], filter: _CurrencyFilter): [Currency]
  regionalBlocs(first: Int, offset: Int, orderBy: [_RegionalBlocOrdering], filter: _RegionalBlocFilter): [RegionalBloc]
  flag(filter: _FlagFilter): Flag
  distanceToOtherCountries(first: Int, offset: Int, orderBy: [_DistanceToOtherCountryOrdering]): [DistanceToOtherCountry]

  """
  Shortest path to go from one country to another with the least border crossing as possible
  """
  shortestPathToOtherCountry(otherCountryAlpha2Code: String!, first: Int, offset: Int, orderBy: [_CountryOrdering]): [Country]
}

type Currency {
  _id: String
  code: String!
  name: String!
  symbol: String!
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type DistanceToOtherCountry {
  distanceInKm: Float

  """Sorry can't return the full country type :/"""
  countryName: String
  _id: String
}

type Flag {
  _id: String
  emoji: String!
  emojiUnicode: String!
  svgFile: String!
  country(filter: _CountryFilter): Country
}

type Language {
  _id: String
  iso639_1: String!
  iso639_2: String!
  name: String!
  nativeName: String!
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type OtherAcronym {
  _id: String!
  name: String!
  regionalBlocs(first: Int, offset: Int, orderBy: [_RegionalBlocOrdering], filter: _RegionalBlocFilter): [RegionalBloc]
}

type OtherName {
  _id: String!
  name: String!
  regionalBlocs(first: Int, offset: Int, orderBy: [_RegionalBlocOrdering], filter: _RegionalBlocFilter): [RegionalBloc]
}

type Query {
  Country(_id: String, alpha2Code: String, alpha3Code: String, area: Float, capital: String, populationDensity: Float, demonym: String, gini: Float, location: _Neo4jPointInput, name: String, nativeName: String, numericCode: String, population: Float, first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
  Timezone(_id: String, name: String, first: Int, offset: Int, orderBy: [_TimezoneOrdering], filter: _TimezoneFilter): [Timezone]
  Subregion(_id: String, name: String, first: Int, offset: Int, orderBy: [_SubregionOrdering], filter: _SubregionFilter): [Subregion]
  Region(_id: String, name: String, first: Int, offset: Int, orderBy: [_RegionOrdering], filter: _RegionFilter): [Region]
  Language(_id: String, iso639_1: String, iso639_2: String, name: String, nativeName: String, first: Int, offset: Int, orderBy: [_LanguageOrdering], filter: _LanguageFilter): [Language]
  Currency(_id: String, code: String, name: String, symbol: String, first: Int, offset: Int, orderBy: [_CurrencyOrdering], filter: _CurrencyFilter): [Currency]
  RegionalBloc(_id: String, acronym: String, name: String, first: Int, offset: Int, orderBy: [_RegionalBlocOrdering], filter: _RegionalBlocFilter): [RegionalBloc]
  Translation(_id: String, languageCode: String, value: String, first: Int, offset: Int, orderBy: [_TranslationOrdering], filter: _TranslationFilter): [Translation]
  Flag(_id: String, emoji: String, emojiUnicode: String, svgFile: String, first: Int, offset: Int, orderBy: [_FlagOrdering], filter: _FlagFilter): [Flag]
  DistanceToOtherCountry(distanceInKm: Float, countryName: String, _id: String, first: Int, offset: Int, orderBy: [_DistanceToOtherCountryOrdering], filter: _DistanceToOtherCountryFilter): [DistanceToOtherCountry]
  TopLevelDomain(_id: String, name: String, first: Int, offset: Int, orderBy: [_TopLevelDomainOrdering], filter: _TopLevelDomainFilter): [TopLevelDomain]
  CallingCode(_id: String, name: String, first: Int, offset: Int, orderBy: [_CallingCodeOrdering], filter: _CallingCodeFilter): [CallingCode]
}

type Region {
  _id: String
  name: String!
  subregions(first: Int, offset: Int, orderBy: [_SubregionOrdering], filter: _SubregionFilter): [Subregion]
}

type RegionalBloc {
  _id: String
  acronym: String!
  name: String!
  otherAcronyms: [OtherAcronym]
  otherNames: [OtherName]
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type Subregion {
  _id: String
  name: String!
  region(filter: _RegionFilter): Region
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type Timezone {
  _id: String
  name: String!
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type TopLevelDomain {
  _id: String
  name: String!
  countries(first: Int, offset: Int, orderBy: [_CountryOrdering], filter: _CountryFilter): [Country]
}

type Translation {
  _id: String
  languageCode: String!
  value: String!
}

