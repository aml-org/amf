#%RAML 1.0
title: Navigation demo API
version: v2
baseUri: https://api.mulesoft.com/{version}
mediaType: application/json
securitySchemes:
  basic:
    type: Basic Authentication
    description: |
      Test basic auth method
  other:
    displayName: Digest
    type: Digest Authentication
documentation:
  -
    title: How to begin
    content: |
      Example content
  -
    title: Other documentation entry
    content: |
      Example content
types:
  Image:
    type: object
  Resource:
    type: object
  AppPerson:
    type: object
  Product:
    type: object
  Picture:
    displayName: Pic
    description: The user's profile picture.
    properties:
      url?:
        type: string
        description: A URL that points to a profile picture of this user.
  Property:
    properties:
      kind:
        type: string
        description: This is always drive#property.
        default: drive#property
        enum:
          - drive#property
      etag:
        type: string
        description: ETag of the property.
      selfLink:
        type: string
        description: The link back to this property.
      key:
        type: string
        description: The key of this property.
      visibility:
        type: string
        description: The visibility of this property.
      value:
        type: string
        description: The value of this property.
  ImportFormat:
    properties:
      source:
        type: string
        description: The imported file's content type to convert from.
      targets:
        description: The possible content types to convert to.
        items:
          type: string
  Unionable:
    type: ImportFormat | Picture
  Arrable:
    items: Picture
/files:
  displayName: Files
  post:
    displayName: Insert
    description: |
      Insert a new file.
      This method supports an /upload URI and accepts uploaded media with the following characteristics:

      - Maximum file size: 5120GB
      - Accepted Media MIME types: */*

      Note: Apps creating shortcuts with files.insert must specify the MIME type `application/vnd.google-apps.drive-sdk`.

      Apps should specify a file extension in the title property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like `"title": "cat.jpg"` in the metadata.

      Subsequent GET requests include the read-only fileExtension property populated with the extension originally specified in the title property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Google Drive attempts to determine the extension based on the file's MIME type.

      ### HTTP request

      This method provides media upload functionality through two separate URIs. For more details, see the document on media upload.

      - Upload URI, for media upload requests: `POST https://www.googleapis.com/upload/drive/v2/files`
      - Metadata URI, for metadata-only requests: `POST https://www.googleapis.com/drive/v2/files`
  get:
    securedBy:
      - basic
    displayName: list
    description: |
      Lists the user's files. Try it now or see an example.

      Requests with `files.list` accept the `q` parameter, which is a search query combining one or more search terms. For more information, see Search for files.

      Note: Note: This method returns all files by default. This includes files with trashed=true in the results. Use the trashed=false query parameter to filter these from the results.
  /{fileId}:
    displayName: Get file
    get:
      description: Gets a file's metadata by ID.
    patch:
      description: Updates file metadata. This method supports patch semantics.
    put:
      description: Updates file metadata and/or content.
    delete:
      description: Permanently deletes a file by ID. Skips the trash. The currently authenticated user must own the file.
    /copy:
      post:
        description: Creates a copy of the specified file.
    /touch:
      post:
        description: Set the file's updated time to the current server time.
    /trash:
      post:
        description: Moves a file to the trash. The currently authenticated user must own the file.
    /untrash:
      post:
        description: Restores a file from the trash.
    /parents:
      get:
        description: Lists a file's parents.
      post:
        description: Adds a parent folder for a file.
      /{parentId}:
        uriParameters:
          parentId:
            type: string
            description: The ID of the parent.
        get:
          description: Gets a specific parent reference.
        delete:
          description: Removes a parent from a file.
    /permissions:
      get:
        description: Lists a file's permissions.
      post:
        description: |
          Inserts a permission for a file.

          Warning: Concurrent permissions operations on the same file are not supported; only the last update is applied.
      /{permissionId}:
        uriParameters:
          permissionId:
            type: string
            description: The ID for the permission.
        get:
          description: Gets a permission by ID.
        put:
          description: |
            Updates a permission.

            **Warning**: Concurrent permissions operations on the same file are not supported; only the last update is applied.
        delete:
          description: |
            Deletes a permission from a file.

            Warning: Concurrent permissions operations on the same file are not supported; only the last update is applied.
          responses:
            "204": {}
        patch:
          description: |
            Updates a permission. This method supports patch semantics.

            **Warning**: Concurrent permissions operations on the same file are not supported; only the last update is applied.
    /revisions:
      get: {}
      /{revisionId}:
        uriParameters:
          revisionId:
            type: string
            description: The ID of the revision.
        get: {}
        put: {}
        delete: {}
        patch: {}
    /comments:
      get: {}
      post:
        description: Creates a new comment on the given file.
      /{commentId}:
        get:
          description: Gets a comment by ID.
        put: {}
        delete:
          description: Deletes a comment.
        patch: {}
        /replies:
          get: {}
          post: {}
          /{replyId}:
            uriParameters:
              replyId:
                type: string
                description: The ID of the reply.
            get:
              description: Gets a reply.
            put:
              description: Updates an existing reply.
            delete:
              description: Deletes a reply.
            patch:
              description: Updates an existing reply. This method supports patch semantics.
    /realtime:
      get:
        description: Exports the contents of the Realtime API data model associated with this file as JSON.
      put:
        displayName: update
        description: |
          Overwrites the Realtime API data model associated with this file with the provided JSON data model.

          This method supports an /upload URI and accepts uploaded media with the following characteristics:

          - **Maximum file size**: 10MB
          - **Accepted Media MIME** types: */*
    /properties:
      get:
        description: Lists a file's properties.
      post:
        description: Adds a property to a file.
      /{propertyKey}:
        uriParameters:
          propertyKey:
            type: string
            description: The key of the property.
        get: {}
        put: {}
        delete: {}
        patch: {}
  /trash:
    delete:
      description: Permanently deletes all of the user's trashed files.
  /{folderId}/children:
    post:
      description: Inserts a file into a folder.
    get:
      description: Lists a folder's children. To list all children of the root folder, use the alias root for the folderId value.
    /{childId}:
      delete:
        description: Removes a child from a folder.
      get:
        description: Gets a specific child reference.
/about:
  displayName: About
  get:
    description: Gets the information about the current user along with Drive API settings.
/changes:
  displayName: Changes
  get: {}
  /{changeId}:
    uriParameters:
      changeId:
        type: string
        description: The ID of the change.
    get:
      description: Gets a specific change.
  /watch:
    post:
      queryParameters:
        spaces?:
          type: string
          description: |
            A comma-separated list of spaces to query. Supported values are:

            - **drive**
            - **appDataFolder**
            - **photos**
      description: Watch for all changes to a user's Drive.
/permissionIds/{email}:
  uriParameters:
    email:
      type: string
      description: The email address for which to return a permission ID
  get:
    description: Returns the permission ID for an email address.
/apps:
  displayName: Apps
  get:
    description: Lists a user's installed apps.
  /{appId}:
    uriParameters:
      appId:
        type: string
        description: The ID of the app.
    get:
      description: Gets a specific app.
/channels/stop:
  post:
    description: |
      Stop watching for changes to a resource.
      If successful, this method returns an empty response body.
/teamdrives:
  displayName: Teamdrives
  post:
    displayName: insert
    description: Creates a new Team Drive.
  get:
    displayName: list
    description: Lists the user's Team Drives.
  /{teamDriveId}:
    uriParameters:
      teamDriveId:
        description: The ID of the Team Drive
        type: string
    delete:
      description: |
        Permanently deletes a Team Drive for which the user is an organizer. The Team Drive cannot contain any untrashed items.
    get:
      description: Gets a Team Drive's metadata by ID.
    put:
      description: Updates a Team Drive's metadata
