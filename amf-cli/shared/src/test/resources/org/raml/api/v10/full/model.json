#%RAML 1.0
title:
  value: api title
  (basic): title
description: api description
version: "1.0"
baseUri: http://base.uri/{version}/{param1}/{param2}/{param3}/{param4}
mediaType: application/json
protocols:
  - HTTP
  - HTTPS
baseUriParameters:
  param1:
    displayName: Param 1
    description: some description
    type: string
    maxLength: 10
    example: one
  param2?:
    type: string
  param3?:
    type: string
    required: true
  param4?:
    type: string
    required: false
documentation:
  -
    title: doc title 1
    content:
      value: single line
      (basic): first chapter
  -
    title: doc title 2
    content: |
      multi
      line
types:
  User:
    examples:
      batman:
        firstname: bruce
        lastname: wayne
        age: 77
        height: 1.82
      daredevil:
        firstname: matt
        lastname: murdock
        age: 52
      quicksilver:
        firstname: pietro
        lastname: maximoff
        age: 104
        height: 1.563
        goggles: true
      example_0:
        firstname: tato
        lastname: bores
        age: 66
    properties:
      firstname:
        type: string
      lastname:
        type: string
      age:
        type: integer
        minimum: 0
        maximum: 144
      height?:
        type: number
      goggles?:
        type: boolean
  SuperUser:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      age:
        type: integer
        minimum: 0
        maximum: 144
      height?:
        type: number
      goggles?:
        type: boolean
      skills:
        maxItems: 3
        items:
          type: string
  Users:
    minItems: 2
    items:
      examples:
        batman:
          firstname: bruce
          lastname: wayne
          age: 77
          height: 1.82
        daredevil:
          firstname: matt
          lastname: murdock
          age: 52
        quicksilver:
          firstname: pietro
          lastname: maximoff
          age: 104
          height: 1.563
          goggles: true
        example_0:
          firstname: tato
          lastname: bores
          age: 66
      properties:
        firstname:
          type: string
        lastname:
          type: string
        age:
          type: integer
          minimum: 0
          maximum: 144
        height?:
          type: number
        goggles?:
          type: boolean
  nString:
    maxLength: 10
    type: string
  UserJson: |
    {
     "$schema": "http://json-schema.org/draft-04/schema",
     "type": "object",
     "properties": {
       "firstname":  { "type": "string" },
       "lastname":  { "type": "string" },
       "age":  { "type": "integer" }
     },
     "required": [ "firstname", "lastname" ]
    }
  UserXml: |
    <xs:schema attributeFormDefault="unqualified"
              elementFormDefault="qualified"
              xmlns:xs="http://www.w3.org/2001/XMLSchema">
     <xs:element name="api-request">
       <xs:complexType>
         <xs:sequence>
           <xs:element type="xs:string" name="input"/>
         </xs:sequence>
       </xs:complexType>
     </xs:element>
    </xs:schema>
  TypeWithCustomFacets:
    type: string
    facets:
      facet1?:
        type: integer
      facet2?:
        type: integer
      facet3?:
        type: integer
        required: true
      facet4?:
        type: integer
        required: false
traits:
  traitOne:
    displayName: uno
    description: method description
    usage: late night
  traitTwo:
    displayName: dos
    description: <<text>>
resourceTypes:
  first:
    usage: first usage
securitySchemes:
  oauth_2_0:
    displayName: OAuth2
    description: oauth 2.0
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
            Used to send a valid OAuth 2 access token. Do not use
            with the "access_token" query string parameter.
          type: string
      queryParameters:
        access_token:
          description: |
            Used to send a valid OAuth 2 access token. Do not use with
            the "Authorization" header.
          type: string
      responses:
        "401":
          description: |
            Bad or expired token. This can happen if the user or Dropbox
            revoked or expired an access token. To fix, re-authenticate
            the user.
          body: {}
        "403":
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          body: {}
    settings:
      authorizationUri: https://www.dropbox.com/1/oauth2/authorize
      accessTokenUri: https://api.dropbox.com/1/oauth2/token
      authorizationGrants:
        - authorization_code
        - implicit
  oauth_1_0:
    description: OAuth 1.0 continues to be supported
    type: OAuth 1.0
    settings:
      requestTokenUri: https://api.dropbox.com/1/oauth/request_token
      authorizationUri: https://www.dropbox.com/1/oauth/authorize
      tokenCredentialsUri: https://api.dropbox.com/1/oauth/access_token
      signatures:
        - HMAC-SHA1
        - PLAINTEXT
annotationTypes:
  basic:
    type: string
  complex:
    allowedTargets:
      - API
      - Resource
    properties:
      controls:
        description: where is hypermedia
        properties:
          url?:
            default: href
          property:
            type: string
          names:
            items:
              type: string
      permanentUri?:
        type: boolean
        default: true
(basic): sometimes
(complex):
  controls:
    url: here
    property: offf
    names:
      - one
      - two
  permanentUri: false
/top:
  description: top description
  get:
    description: get something
    protocols:
      - HTTPS
    queryParameters:
      one:
        displayName: The One
        type: number
      two:
        items:
          type: string | number
      three?:
        type: integer
      four?:
        type: integer
      five?:
        type: string
        required: true
      six?:
        type: string
        required: false
    headers:
      header-one:
        type: string
      header-two:
        displayName: The Second
    displayName: uno
    body: {}
    securedBy:
      - oauth_2_0
  post:
    description: post something
    queryString:
      properties:
        lat:
          type: number
        long:
          type: number
    responses:
      "200":
        headers:
          header-one:
            type: string
          header-two:
            displayName: The Second
        body:
          application/json:
            examples:
              batman:
                firstname: bruce
                lastname: wayne
                age: 77
                height: 1.82
              daredevil:
                firstname: matt
                lastname: murdock
                age: 52
              quicksilver:
                firstname: pietro
                lastname: maximoff
                age: 104
                height: 1.563
                goggles: true
              example_0:
                firstname: tato
                lastname: bores
                age: 66
            properties:
              firstname:
                type: string
              lastname:
                type: string
              age:
                type: integer
                minimum: 0
                maximum: 144
              height?:
                type: number
              goggles?:
                type: boolean
          application/xml:
            examples:
              first: |
                <first/>
              second: |
                <second/>
            type: |
              <?xml version="1.0" encoding="utf-16"?>
              <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                <xsd:element name="first" type="xsd:string" />
                <xsd:element name="second" type="xsd:string" />
              </xsd:schema>
      "400":
        body:
          text/plain:
            type: any
    displayName: dos
    body:
      application/json:
        examples:
          batman:
            firstname: bruce
            lastname: wayne
            age: 77
            height: 1.82
          daredevil:
            firstname: matt
            lastname: murdock
            age: 52
          quicksilver:
            firstname: pietro
            lastname: maximoff
            age: 104
            height: 1.563
            goggles: true
          example_0:
            firstname: tato
            lastname: bores
            age: 66
        properties:
          firstname:
            type: string
          lastname:
            type: string
          age:
            type: integer
            minimum: 0
            maximum: 144
          height?:
            type: number
          goggles?:
            type: boolean
      application/xml:
        examples:
          first: |
            <first/>
          second: |
            <second/>
        type: |
          <?xml version="1.0" encoding="utf-16"?>
          <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
            <xsd:element name="first" type="xsd:string" />
            <xsd:element name="second" type="xsd:string" />
          </xsd:schema>
    securedBy:
      - oauth_2_0
      - oauth_1_0
      - null
  /child/{childId}:
    description: child description
    uriParameters:
      childId?:
        type: integer
      childId2?:
        required: true
    post:
      body:
        application/json: |
          {
           "$schema": "http://json-schema.org/draft-04/schema",
           "type": "object",
           "properties": {
             "firstname":  { "type": "string" },
             "lastname":  { "type": "string" },
             "age":  { "type": "integer" }
           },
           "required": [ "firstname", "lastname" ]
          }
      securedBy:
        - oauth_2_0
        - oauth_1_0
        - null
