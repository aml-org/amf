{
  "@graph": [
    {
      "@id": "#16",
      "@type": [
        "doc:APIContractProcessingData"
      ],
      "apiContract:modelVersion": "3.8.2",
      "doc:transformed": true,
      "doc:sourceSpec": "RAML 1.0"
    },
    {
      "@id": "#17",
      "@type": [
        "apiContract:WebAPI",
        "apiContract:API",
        "doc:RootDomainElement",
        "doc:DomainElement"
      ],
      "core:name": "se-8987-reopen2",
      "apiContract:endpoint": [
        {
          "@id": "#18"
        },
        {
          "@id": "#24"
        }
      ],
      "smaps": {
        "lexical": {
          "core:name": "[(2,0)-(3,0)]",
          "#17": "[(2,0)-(33,8)]"
        }
      }
    },
    {
      "@id": "#18",
      "@type": [
        "apiContract:EndPoint",
        "doc:DomainElement"
      ],
      "apiContract:path": "/example1",
      "apiContract:supportedOperation": [
        {
          "@id": "#19"
        }
      ],
      "smaps": {
        "lexical": {
          "apiContract:path": "[(20,0)-(20,9)]",
          "#18": "[(20,0)-(27,0)]"
        }
      }
    },
    {
      "@id": "#24",
      "@type": [
        "apiContract:EndPoint",
        "doc:DomainElement"
      ],
      "apiContract:path": "/example2",
      "apiContract:supportedOperation": [
        {
          "@id": "#25"
        }
      ],
      "smaps": {
        "lexical": {
          "apiContract:path": "[(27,0)-(27,9)]",
          "#24": "[(27,0)-(33,8)]"
        }
      }
    },
    {
      "@id": "#19",
      "@type": [
        "apiContract:Operation",
        "core:Operation",
        "doc:DomainElement"
      ],
      "apiContract:method": "post",
      "apiContract:expects": [
        {
          "@id": "#20"
        }
      ],
      "apiContract:returns": [
        {
          "@id": "#23"
        }
      ],
      "smaps": {
        "lexical": {
          "apiContract:returns": "[(25,2)-(27,0)]",
          "#19": "[(21,1)-(27,0)]"
        }
      }
    },
    {
      "@id": "#25",
      "@type": [
        "apiContract:Operation",
        "core:Operation",
        "doc:DomainElement"
      ],
      "apiContract:method": "post",
      "apiContract:expects": [
        {
          "@id": "#26"
        }
      ],
      "apiContract:returns": [
        {
          "@id": "#28"
        }
      ],
      "smaps": {
        "lexical": {
          "apiContract:returns": "[(32,2)-(33,8)]",
          "#25": "[(28,1)-(33,8)]"
        }
      }
    },
    {
      "@id": "#20",
      "@type": [
        "apiContract:Request",
        "core:Request",
        "apiContract:Message",
        "doc:DomainElement"
      ],
      "apiContract:payload": [
        {
          "@id": "#21"
        }
      ],
      "smaps": {
        "lexical": {
          "apiContract:payload": "[(22,2)-(25,0)]",
          "#20": "[(22,7)-(25,0)]"
        },
        "virtual-element": {
          "#20": "true"
        }
      }
    },
    {
      "@id": "#23",
      "@type": [
        "apiContract:Response",
        "core:Response",
        "apiContract:Message",
        "doc:DomainElement"
      ],
      "apiContract:statusCode": "200",
      "core:name": "200",
      "smaps": {
        "lexical": {
          "#23": "[(26,4)-(27,0)]"
        }
      }
    },
    {
      "@id": "#26",
      "@type": [
        "apiContract:Request",
        "core:Request",
        "apiContract:Message",
        "doc:DomainElement"
      ],
      "apiContract:payload": [
        {
          "@id": "#27"
        }
      ],
      "smaps": {
        "lexical": {
          "apiContract:payload": "[(29,2)-(32,0)]",
          "#26": "[(29,7)-(32,0)]"
        },
        "virtual-element": {
          "#26": "true"
        }
      }
    },
    {
      "@id": "#28",
      "@type": [
        "apiContract:Response",
        "core:Response",
        "apiContract:Message",
        "doc:DomainElement"
      ],
      "apiContract:statusCode": "200",
      "core:name": "200",
      "smaps": {
        "lexical": {
          "#28": "[(33,4)-(33,8)]"
        }
      }
    },
    {
      "@id": "#21",
      "@type": [
        "apiContract:Payload",
        "core:Payload",
        "doc:DomainElement"
      ],
      "core:mediaType": "application/json",
      "raml-shapes:schema": {
        "@id": "#22"
      },
      "smaps": {
        "lexical": {
          "#21": "[(23,4)-(25,0)]"
        }
      }
    },
    {
      "@id": "#27",
      "@type": [
        "apiContract:Payload",
        "core:Payload",
        "doc:DomainElement"
      ],
      "core:mediaType": "application/json",
      "raml-shapes:schema": {
        "@id": "#1"
      },
      "smaps": {
        "lexical": {
          "#27": "[(30,4)-(32,0)]"
        }
      }
    },
    {
      "@id": "#22",
      "@type": [
        "raml-shapes:UnionShape",
        "raml-shapes:AnyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "raml-shapes:anyOf": [
        {
          "@id": "#2"
        },
        {
          "@id": "#10"
        }
      ],
      "smaps": {
        "auto-generated-name": {
          "#22": ""
        },
        "lexical": {
          "#22": "[(24,6)-(25,0)]"
        }
      }
    },
    {
      "@id": "#1",
      "@type": [
        "raml-shapes:UnionShape",
        "raml-shapes:AnyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "raml-shapes:anyOf": [
        {
          "@id": "#2"
        },
        {
          "@id": "#10"
        }
      ],
      "shacl:name": "UnionType",
      "smaps": {
        "declared-element": {
          "#1": ""
        },
        "lexical": {
          "shacl:name": "[(4,1)-(4,10)]",
          "#1": "[(4,1)-(6,0)]"
        },
        "type-property-lexical-info": {
          "#1": "[(5,2)-(5,6)]"
        }
      }
    },
    {
      "@id": "#2",
      "@type": [
        "shacl:NodeShape",
        "raml-shapes:AnyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "shacl:closed": false,
      "shacl:property": [
        {
          "@id": "#6"
        }
      ],
      "shacl:name": "Dog",
      "apiContract:examples": [
        {
          "@id": "#3"
        }
      ],
      "smaps": {
        "synthesized-field": {
          "shacl:closed": "true"
        },
        "resolved-link": {
          "#2": "amf://id#9"
        },
        "type-property-lexical-info": {
          "#2": "[(7,2)-(7,6)]"
        },
        "lexical": {
          "apiContract:examples": "[(11,2)-(13,0)]",
          "#2": "[(6,1)-(13,0)]",
          "shacl:name": "[(6,1)-(6,4)]"
        },
        "declared-element": {
          "#2": ""
        },
        "resolved-link-target": {
          "#2": "amf://id#2"
        }
      }
    },
    {
      "@id": "#10",
      "@type": [
        "shacl:NodeShape",
        "raml-shapes:AnyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "shacl:closed": false,
      "shacl:property": [
        {
          "@id": "#14"
        }
      ],
      "shacl:name": "Cat",
      "apiContract:examples": [
        {
          "@id": "#11"
        }
      ],
      "smaps": {
        "synthesized-field": {
          "shacl:closed": "true"
        },
        "resolved-link": {
          "#10": "amf://id#9"
        },
        "type-property-lexical-info": {
          "#10": "[(14,2)-(14,6)]"
        },
        "lexical": {
          "apiContract:examples": "[(18,2)-(20,0)]",
          "#10": "[(13,1)-(20,0)]",
          "shacl:name": "[(13,1)-(13,4)]"
        },
        "declared-element": {
          "#10": ""
        },
        "resolved-link-target": {
          "#10": "amf://id#10"
        }
      }
    },
    {
      "@id": "#6",
      "@type": [
        "shacl:PropertyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "shacl:path": [
        {
          "@id": "http://a.ml/vocabularies/data#name"
        }
      ],
      "raml-shapes:range": {
        "@id": "#7"
      },
      "shacl:minCount": 1,
      "shacl:name": "name",
      "smaps": {
        "synthesized-field": {
          "shacl:minCount": "true",
          "shacl:path": "true"
        },
        "lexical": {
          "raml-shapes:range": "[(9,9)-(11,0)]",
          "#6": "[(9,4)-(11,0)]"
        }
      }
    },
    {
      "@id": "#3",
      "@type": [
        "apiContract:Example",
        "doc:DomainElement"
      ],
      "doc:strict": true,
      "doc:structuredValue": {
        "@id": "#4"
      },
      "doc:raw": "name: Pepe",
      "smaps": {
        "synthesized-field": {
          "doc:raw": "true",
          "doc:strict": "true"
        },
        "lexical": {
          "#3": "[(11,2)-(13,0)]"
        }
      }
    },
    {
      "@id": "#14",
      "@type": [
        "shacl:PropertyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "shacl:path": [
        {
          "@id": "http://a.ml/vocabularies/data#age"
        }
      ],
      "raml-shapes:range": {
        "@id": "#15"
      },
      "shacl:minCount": 1,
      "shacl:name": "age",
      "smaps": {
        "synthesized-field": {
          "shacl:minCount": "true",
          "shacl:path": "true"
        },
        "lexical": {
          "raml-shapes:range": "[(16,8)-(18,0)]",
          "#14": "[(16,4)-(18,0)]"
        }
      }
    },
    {
      "@id": "#11",
      "@type": [
        "apiContract:Example",
        "doc:DomainElement"
      ],
      "doc:strict": true,
      "doc:structuredValue": {
        "@id": "#12"
      },
      "doc:raw": "age: 45",
      "smaps": {
        "synthesized-field": {
          "doc:raw": "true",
          "doc:strict": "true"
        },
        "lexical": {
          "#11": "[(18,2)-(20,0)]"
        }
      }
    },
    {
      "@id": "#7",
      "@type": [
        "raml-shapes:ScalarShape",
        "raml-shapes:AnyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "shacl:datatype": [
        {
          "@id": "http://www.w3.org/2001/XMLSchema#string"
        }
      ],
      "shacl:name": "name",
      "smaps": {
        "type-property-lexical-info": {
          "#7": "[(10,6)-(10,10)]"
        },
        "lexical": {
          "shacl:datatype": "[(10,6)-(11,0)]",
          "#7": "[(9,4)-(11,0)]"
        }
      }
    },
    {
      "@id": "#4",
      "@type": [
        "data:Object",
        "data:Node",
        "doc:DomainElement"
      ],
      "data:name": {
        "@id": "#5"
      },
      "core:name": "object_1",
      "smaps": {
        "synthesized-field": {
          "core:name": "true"
        },
        "lexical": {
          "data:name": "[(12,4)-(13,0)]",
          "#4": "[(12,0)-(13,0)]"
        }
      }
    },
    {
      "@id": "#15",
      "@type": [
        "raml-shapes:ScalarShape",
        "raml-shapes:AnyShape",
        "shacl:Shape",
        "raml-shapes:Shape",
        "doc:DomainElement"
      ],
      "shacl:datatype": [
        {
          "@id": "http://www.w3.org/2001/XMLSchema#integer"
        }
      ],
      "shacl:name": "age",
      "smaps": {
        "type-property-lexical-info": {
          "#15": "[(17,6)-(17,10)]"
        },
        "lexical": {
          "shacl:datatype": "[(17,6)-(18,0)]",
          "#15": "[(16,4)-(18,0)]"
        }
      }
    },
    {
      "@id": "#12",
      "@type": [
        "data:Object",
        "data:Node",
        "doc:DomainElement"
      ],
      "data:age": {
        "@id": "#13"
      },
      "core:name": "object_1",
      "smaps": {
        "synthesized-field": {
          "core:name": "true"
        },
        "lexical": {
          "data:age": "[(19,4)-(20,0)]",
          "#12": "[(19,0)-(20,0)]"
        }
      }
    },
    {
      "@id": "#5",
      "@type": [
        "data:Scalar",
        "data:Node",
        "doc:DomainElement"
      ],
      "data:value": "Pepe",
      "shacl:datatype": [
        {
          "@id": "http://www.w3.org/2001/XMLSchema#string"
        }
      ],
      "core:name": "name",
      "smaps": {
        "synthesized-field": {
          "core:name": "true",
          "shacl:datatype": "true"
        },
        "lexical": {
          "#5": "[(12,10)-(12,14)]"
        }
      }
    },
    {
      "@id": "#13",
      "@type": [
        "data:Scalar",
        "data:Node",
        "doc:DomainElement"
      ],
      "data:value": "45",
      "shacl:datatype": [
        {
          "@id": "http://www.w3.org/2001/XMLSchema#integer"
        }
      ],
      "core:name": "age",
      "smaps": {
        "synthesized-field": {
          "core:name": "true",
          "shacl:datatype": "true"
        },
        "lexical": {
          "#13": "[(19,9)-(19,11)]"
        }
      }
    },
    {
      "@id": "",
      "doc:declares": [
        {
          "@id": "#1"
        },
        {
          "@id": "#2"
        },
        {
          "@id": "#10"
        }
      ],
      "@type": [
        "doc:Document",
        "doc:Fragment",
        "doc:Module",
        "doc:Unit"
      ],
      "doc:encodes": {
        "@id": "#17"
      },
      "doc:root": true,
      "doc:processingData": {
        "@id": "#16"
      }
    }
  ],
  "@context": {
    "@base": "amf://id",
    "shacl": "http://www.w3.org/ns/shacl#",
    "raml-shapes": "http://a.ml/vocabularies/shapes#",
    "data": "http://a.ml/vocabularies/data#",
    "doc": "http://a.ml/vocabularies/document#",
    "apiContract": "http://a.ml/vocabularies/apiContract#",
    "core": "http://a.ml/vocabularies/core#"
  }
}
