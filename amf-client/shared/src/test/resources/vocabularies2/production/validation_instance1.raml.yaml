#%Validation Profile Copy 1.0
description: Profile that enforces JSON API constraints over the API description
profile: JSON API 1.0
warning:
  - json-api-json-specific-media-type
violation:
  - json-api-top-level-object
  - json-api-content-type-content-headers-request
  - json-api-content-type-content-headers-response
  - json-api-415-server-response
  - json-api-406-server-response
  - json-api-valid-payload
  - json-api-valid-payload-data-errors-exclusive
  - json-api-valid-payload-no-includes-without-data
  - json-api-valid-primary-data
  - json-api-valid-resource-shapes
  - json-api-fields-namespace
  - json-api-valid-relationship-keys
  - json-api-valid-links-object
  - json-api-valid-links
  - json-api-meta-object
  - json-api-includes
validations:
  json-api-json-specific-media-type:
    message: JSON API documents used the 'application/vnd.api+json' media type. Media type of Payloads must match.
    targetClass:
      - raml-http.Payload
    propertyConstraints:
      raml-http.mediaType:
        in:
          - application/vnd.api+json
  json-api-content-type-content-headers-request:
    message: Clients request must at least specify the content-type header
    targetClass:
      - raml-http.Request
    functionConstraint:
      code: |
        function(request) {
          var headerNames = path(request, 'http:header / schema:name');
          for (var i=0; i<headerNames.length; i++) {
            if(headerNames[i] == "Content-type")
              return true;
          }
          return false;
        }
  json-api-content-type-content-headers-response:
    message: Server responses must at least specify the content-type header
    targetClass:
      - hydra.Operation
    functionConstraint:
      code: |
        function(operation) {
          if (value(operation, 'hydra:method', 'get')) {
            return value(operation, 'hydra:returns / http:header / schema:name', 'Content-type');
          }
          return true;
        }
  json-api-415-server-response:
    message: Servers MUST support a 415 response code for requests with content-type header with type parameters
    targetClass:
      - hydra.Operation
    functionConstraint:
      code: |
        function(operation) {
           if (value(operation, 'hydra:method', 'post')) {
             return value(operation, "hydra:returns / hydra:statusCode", "415");
           } else {
             return true
           }
        }
  json-api-406-server-response:
    message: Servers MUST support a 406 response code for requests with accept header with type parameters
    targetClass:
      - hydra.Operation
    functionConstraint:
      code: |
        function(operation) {
           if (value(operation, 'hydra:method', 'post')) {
             return value(operation, "hydra:returns / hydra:statusCode", "406");
           } else {
             return true
           }
        }
  json-api-top-level-object:
    message: A JSON object MUST be at the root of every JSON API request and response containing data. This object defines a document’s “top level”.
    targetClass:
      - raml-http.Payload
    functionConstraint:
      code: |
        function(payload)  {
          if (value(payload, 'http:mediaType', 'application/vnd.api+json')) {
            var schema = path(payload, 'http:schema')[0]
            return isModelType(schema, 'shacl:NodeShape');
          } else {
            return true;
          }
        }
  json-api-valid-payload:
    message: A document MUST contain at least one of the following top-level members data, errors or meta
    targetClass:
      - raml-http.Payload
    functionConstraint:
      code: |
        function(payload) {
          if (value(payload, 'http:mediaType', 'application/vnd.api+json')) {
            var hasData = value(payload, 'http:schema / shacl:property / shacl:name', 'data');
            var hasErrors = value(payload, 'http:schema / shacl:property / shacl:name', 'errors');
            var hasMeta = value(payload, 'http:schema / shacl:property / shacl:name', 'meta');
            return (hasData || hasErrors || hasMeta);
          } else {
            return true;
          }
        }
  json-api-valid-payload-data-errors-exclusive:
    message: The members data and errors MUST NOT coexist in the same document.
    targetClass:
      - raml-http.Payload
    functionConstraint:
      code: |
        function(payload) {
          if (value(payload, 'http:mediaType', 'application/vnd.api+json')) {
            var hasData = value(payload, 'http:schema / shacl:property / shacl:name', 'data');
            var hasErrors = value(payload, 'http:schema / shacl:property / shacl:name', 'errors');
            return !(hasData && hasErrors)
          } else {
            return true;
          }
        }
  json-api-valid-payload-no-includes-without-data:
    message: If a document does not contain a top-level data key, the included member MUST NOT be present either
    targetClass:
      - raml-http.Payload
    functionConstraint:
      code: |
        function(payload) {
          if (value(payload, 'http:mediaType', 'application/vnd.api+json')) {
            var hasData = value(payload, 'http:schema / shacl:property / shacl:name', 'data');
            var hasLinks = value(payload, 'http:schema / shacl:property / shacl:name', 'links');
            if (!hasData) {
              return !hasLinks
            } else {
              return true
            }
          } else {
            return true;
          }
        }
  json-api-valid-primary-data:
    message: Primary data of a payload must be either single resource or an array of resources
    targetClass:
      - raml-http.Payload
    functionConstraint:
      code: |
        function(payload) {
            if (value(payload, 'http:mediaType', 'application/vnd.api+json')) {
              var schemas = path(payload, 'http:schema');
              var dataSchema = filterByPropertyValue(schemas, 'shacl:property / shacl:name', 'data')[0];
              if (dataSchema != null) {
                var properties = path(dataSchema, 'shacl:property');
                var dataProperty = filterByPropertyValue(properties, 'shacl:name', 'data');
                var dataSchemaRange = path(dataProperty, 'raml-shapes:range');
                return isModelType(dataSchemaRange, 'shacl:NodeShape') || isModelType(dataSchemaRange, 'raml-shapes:ArrayShape');
              } else {
                return true;
              }
            } else {
              return true;
            }
        }
  json-api-valid-resource-shapes:
    message: Resource objects MUST contain at lest the 'type' top-level member
    targetClass:
      - shacl.PropertyShape
    functionConstraint:
      code: |
        function(property) {
           if (value(property, 'shacl:name', 'data')) {
             var propertyRange = path(property, 'raml-shapes:range')[0]
             if (propertyRange == null) {
               return false;
             } else {
               var resourceShape;
               if (isModelType(propertyRange, 'raml-shapes:ArrayShape')) {
                  resourceShape = path(propertyRange, 'raml-shapes:items')[0]
               } else if (isModelType(propertyRange, 'shacl:NodeShape')) {
                 resourceShape = propertyRange
               }
               if (resourceShape != null) {
                 var hasTypeProperty = value(resourceShape, 'shacl:property / shacl:name', 'type')
                 return hasTypeProperty;
               } else {
                 return false;
               }
             }
           } else {
             return true;
           }
        }
  json-api-fields-namespace:
    message: Resource objects MUST have valid field names without duplication or 'id' and 'type' field names
    targetClass:
      - shacl.NodeShape
    functionConstraint:
      code: |
        function(node) {
          var fieldNames = {};
          var properties = path(node, 'shacl:property') || [];
          var attributesProperty = filterByPropertyValue(properties, 'shacl:name', 'attributes');
          if (attributesProperty) {
            var attributeNames = path(attributesProperty, 'raml-shapes:range / shacl:property / shacl:name')
            for (var i=0; i< attributeNames.length; i++) {
              var attributeName = attributeNames[i];
              if (attributeName === 'type' || attributeName === 'id') {
                return false;
              }
              fieldNames[attributeName] = true;
            }
          }
          var relationshipsProperty = filterByPropertyValue(properties, 'shacl:name', 'relationships');
          if (relationshipsProperty) {
            var relationshipNames = path(relationshipsProperty, 'raml-shapes:range / shacl:property / shacl:name')
            for (var i=0; i< relationshipNames.length; i++) {
              var relationshipName = relationshipNames[i];
              if (relationshipName === 'type' || relationshipName === 'id' || fieldNames[relationshipName]) {
                return false;
              }
              fieldNames[relationshipName] = true;
            }
          }
        }
  json-api-valid-relationship-keys:
    message: Relationship objects must contain at least a 'links', 'data' or 'meta' field
    targetClass:
      - shacl.PropertyShape
    functionConstraint:
      code: |
        function(property) {
           if (value(property, 'shacl:name', 'relationships')) {
             var relationshipsObject = path(property, 'raml-shapes:range')[0];
             if (relationshipsObject == null) {
               return false;
             } else {
               var relationships = path(relationshipsObject, 'shacl:property / raml-shapes:range');
               for (var i=0; i<relationships.length; i++) {
                 var relationship = relationships[i];
                 var relationshipFields = path(relationship, 'shacl:property / shacl:name');
                 var foundValidKey = false;
                 for (var j=0; j<relationshipFields.length; j++) {
                   var fieldName = relationshipFields[j];
                   if (fieldName === 'links' || fieldName === 'data' || fieldName === 'meta') {
                       foundValidKey = true;
                   }
                 }
                 if (foundValidKey === false) {
                   return false;
                 }
               }
               return true;
             }
           } else {
             return true;
           }
        }
  json-api-valid-links-object:
    message: Links objects must contain at leat one of the following fields 'self' or 'related'
    targetClass:
      - shacl.PropertyShape
    functionConstraint:
      code: |
        function(property) {
           if (value(property, 'shacl:name', 'links')) {
             var linksObject = path(property, 'raml-shapes:range')[0];
             if (linksObject == null) {
               return false;
             } else {
               var links = path(linksObject, 'shacl:property / shacl:name');
               for (var i=0; i<links.length; i++) {
                 var link = links[i];
                 if (link === 'self' || link === 'related') {
                   return true;
                 }
               }
               return false;
             }
           } else {
             return true;
           }
        }
  json-api-valid-links:
    message: Links must contain either a simple string or map with 'href' and optional 'meta'
    targetClass:
      - shacl.PropertyShape
    functionConstraint:
      code: |
        function(property) {
           if (value(property, 'shacl:name', 'self') || value(property, 'shacl:name', 'related')) {
             var link =  path(property, 'raml-shapes:range')[0];
             if (isModelType(link, 'shacl:ScalarShape')) {
               var dataTypeNode = path(link, 'shacl:datatype')[0] || {}
               return dataTypeNode["@id"] === 'xsd:string';
             } else if (isModelType(link, 'shacl:NodeShape')) {
                var keys = path(link, 'shacl:property / shacl:name');
                for (var i=0; i<keys.length; i++) {
                  var key = keys[i];
                  if (key === 'href' || key === 'meta') {
                    return true;
                  }
                }
                return false;
             } else {
                return false;
             }
           } else {
             return true;
           }
        }
  json-api-meta-object:
    message: Resource objects MAY contain meta members whose value is a meta object
    targetClass:
      - shacl.PropertyShape
    functionConstraint:
      code: |
        function(property) {
          if (value(property, 'shacl:name', 'meta')) {
            var meta =  path(property, 'raml-shapes:range')[0];
            return isModelType(meta, 'shacl:NodeShape')
          } else {
            return true;
          }
        }
  json-api-includes:
    message: Compound documents may include a list of included resource objects
    targetClass:
      - shacl.PropertyShape
    functionConstraint:
      code: |-
        function(property) {
          if (value(property, 'shacl:name', 'included')) {
            var includes =  path(property, 'raml-shapes:range')[0];
            if (isModelType(includes, 'raml-shapes:ArrayShape')) {
              var item = path(includes, 'raml-shapes:items')[0]
              if (isModelType(item,  'shacl:NodeShape')) {
                var hasId = value(item, 'shacl:property / shacl:name', 'id');
                var hasType = value(item, 'shacl:property / shacl:name', 'type');
                return (hasId && hasType);
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            return true;
          }
        }
