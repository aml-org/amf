type Query {
  operation(arg: String!): String!
  _service: _Service
  property: String!
}

interface Interface @Directive {
  property: String! @Directive
  operation(arg: String! @Directive): String! @Directive
}

enum Enum @Directive {
  Value @Directive
}

scalar Scalar @Directive
type Object @Directive {
  property: String! @Directive
  operation(arg: String! @Directive): String! @Directive
}

input InputObject @Directive {
  property: String! @Directive
}

union Union @Directive = Object
directive @Directive on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
scalar FieldSet
type _Service {
  sdl: String
}

directive @external on FIELD_DEFINITION
directive @requires(fields: FieldSet!) on FIELD_DEFINITION
directive @provides(fields: FieldSet!) on FIELD_DEFINITION
directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE
directive @shareable on OBJECT | FIELD_DEFINITION
directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
directive @override(from: String!) on FIELD_DEFINITION
